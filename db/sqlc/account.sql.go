// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: account.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  name,
  email,
  password,
  weight,
  body_fat
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, name, email, password, password_changed_at, weight, body_fat, start_date
`

type CreateAccountParams struct {
	Name     string  `json:"name"`
	Email    string  `json:"email"`
	Password string  `json:"password"`
	Weight   float32 `json:"weight"`
	BodyFat  float32 `json:"body_fat"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Weight,
		arg.BodyFat,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.Weight,
		&i.BodyFat,
		&i.StartDate,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :one
DELETE FROM accounts WHERE id = $1 RETURNING id, name, email, password, password_changed_at, weight, body_fat, start_date
`

func (q *Queries) DeleteAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRowContext(ctx, deleteAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.Weight,
		&i.BodyFat,
		&i.StartDate,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, name, email, password, password_changed_at, weight, body_fat, start_date FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.Weight,
		&i.BodyFat,
		&i.StartDate,
	)
	return i, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT id, email, password, password_changed_at, start_date FROM 
accounts WHERE email = $1 LIMIT 1
`

type GetAccountByEmailRow struct {
	ID                uuid.UUID `json:"id"`
	Email             string    `json:"email"`
	Password          string    `json:"password"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	StartDate         time.Time `json:"start_date"`
}

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (GetAccountByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountByEmail, email)
	var i GetAccountByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.PasswordChangedAt,
		&i.StartDate,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, name, email, password, password_changed_at, weight, body_fat, start_date FROM accounts
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.PasswordChangedAt,
			&i.Weight,
			&i.BodyFat,
			&i.StartDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWeight = `-- name: UpdateWeight :exec
UPDATE accounts SET
weight = $1 WHERE 
id = $2 RETURNING id, name, email, password, password_changed_at, weight, body_fat, start_date
`

type UpdateWeightParams struct {
	Weight float32   `json:"weight"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateWeight(ctx context.Context, arg UpdateWeightParams) error {
	_, err := q.db.ExecContext(ctx, updateWeight, arg.Weight, arg.ID)
	return err
}
