// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: exercise.sql

package db

import (
	"context"
)

const createExercise = `-- name: CreateExercise :one
INSERT INTO exercise (
  name,
  muscle_group,
  category
) VALUES (
  $1, $2, $3
) RETURNING id, name, muscle_group, category
`

type CreateExerciseParams struct {
	Name        string `json:"name"`
	MuscleGroup string `json:"muscle_group"`
	Category    string `json:"category"`
}

func (q *Queries) CreateExercise(ctx context.Context, arg CreateExerciseParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, createExercise, arg.Name, arg.MuscleGroup, arg.Category)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MuscleGroup,
		&i.Category,
	)
	return i, err
}

const deleteExercise = `-- name: DeleteExercise :exec
DELETE FROM exercise WHERE name = ($1)
`

func (q *Queries) DeleteExercise(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteExercise, name)
	return err
}

const getExercise = `-- name: GetExercise :one
SELECT id, name, muscle_group, category FROM exercise
WHERE name = ($1) LIMIT 1
`

func (q *Queries) GetExercise(ctx context.Context, name string) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, getExercise, name)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MuscleGroup,
		&i.Category,
	)
	return i, err
}

const listByMuscleGroup = `-- name: ListByMuscleGroup :many
SELECT id, name, muscle_group, category FROM exercise 
WHERE muscle_group = ($1)
ORDER BY name
LIMIT $2
OFFSET $3
`

type ListByMuscleGroupParams struct {
	MuscleGroup string `json:"muscle_group"`
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
}

func (q *Queries) ListByMuscleGroup(ctx context.Context, arg ListByMuscleGroupParams) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, listByMuscleGroup, arg.MuscleGroup, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Exercise{}
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MuscleGroup,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExercises = `-- name: ListExercises :many
SELECT id, name, muscle_group, category FROM exercise
ORDER BY name 
LIMIT $1
OFFSET $2
`

type ListExercisesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListExercises(ctx context.Context, arg ListExercisesParams) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, listExercises, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Exercise{}
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MuscleGroup,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExerciseName = `-- name: UpdateExerciseName :exec
UPDATE exercise SET
name = ($1)
WHERE name = ($2) RETURNING id, name, muscle_group, category
`

type UpdateExerciseNameParams struct {
	Name   string `json:"name"`
	Name_2 string `json:"name_2"`
}

func (q *Queries) UpdateExerciseName(ctx context.Context, arg UpdateExerciseNameParams) error {
	_, err := q.db.ExecContext(ctx, updateExerciseName, arg.Name, arg.Name_2)
	return err
}

const updateMuscleGroup = `-- name: UpdateMuscleGroup :exec
UPDATE exercise SET
muscle_group = ($1)
WHERE name = ($2) RETURNING id, name, muscle_group, category
`

type UpdateMuscleGroupParams struct {
	MuscleGroup string `json:"muscle_group"`
	Name        string `json:"name"`
}

func (q *Queries) UpdateMuscleGroup(ctx context.Context, arg UpdateMuscleGroupParams) error {
	_, err := q.db.ExecContext(ctx, updateMuscleGroup, arg.MuscleGroup, arg.Name)
	return err
}
