// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: set.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSet = `-- name: CreateSet :one
INSERT INTO set DEFAULT VALUES
RETURNING id
`

func (q *Queries) CreateSet(ctx context.Context) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createSet)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteSet = `-- name: DeleteSet :exec
DELETE FROM set WHERE id = $1
`

func (q *Queries) DeleteSet(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSet, id)
	return err
}

const getLiftSets = `-- name: GetLiftSets :many
SELECT exersise_name, weight, reps, date_lifted, set_id
FROM set JOIN lift ON set.id = lift.set_id WHERE set.id = $1
`

type GetLiftSetsRow struct {
	ExersiseName string    `json:"exersise_name"`
	Weight       float32   `json:"weight"`
	Reps         int32     `json:"reps"`
	DateLifted   time.Time `json:"date_lifted"`
	SetID        uuid.UUID `json:"set_id"`
}

func (q *Queries) GetLiftSets(ctx context.Context, id uuid.UUID) ([]GetLiftSetsRow, error) {
	rows, err := q.db.QueryContext(ctx, getLiftSets, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLiftSetsRow
	for rows.Next() {
		var i GetLiftSetsRow
		if err := rows.Scan(
			&i.ExersiseName,
			&i.Weight,
			&i.Reps,
			&i.DateLifted,
			&i.SetID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSet = `-- name: GetSet :one
SELECT id FROM set 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSet(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getSet, id)
	err := row.Scan(&id)
	return id, err
}
