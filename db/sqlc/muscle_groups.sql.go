// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: muscle_groups.sql

package db

import (
	"context"
)

const createMuscleGroup = `-- name: CreateMuscleGroup :one
INSERT INTO muscle_group (
  name
) VALUES (
  $1
)
RETURNING id, name
`

func (q *Queries) CreateMuscleGroup(ctx context.Context, name string) (MuscleGroup, error) {
	row := q.db.QueryRowContext(ctx, createMuscleGroup, name)
	var i MuscleGroup
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :one
DELETE FROM muscle_group WHERE name = $1 RETURNING id, name
`

func (q *Queries) DeleteGroup(ctx context.Context, name string) (MuscleGroup, error) {
	row := q.db.QueryRowContext(ctx, deleteGroup, name)
	var i MuscleGroup
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getMuscleGroup = `-- name: GetMuscleGroup :one
SELECT id, name FROM muscle_group
WHERE name = $1
`

func (q *Queries) GetMuscleGroup(ctx context.Context, name string) (MuscleGroup, error) {
	row := q.db.QueryRowContext(ctx, getMuscleGroup, name)
	var i MuscleGroup
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getMuscleGroups = `-- name: GetMuscleGroups :many
SELECT id, name FROM muscle_group
ORDER BY name
`

func (q *Queries) GetMuscleGroups(ctx context.Context) ([]MuscleGroup, error) {
	rows, err := q.db.QueryContext(ctx, getMuscleGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MuscleGroup{}
	for rows.Next() {
		var i MuscleGroup
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroup = `-- name: UpdateGroup :one
UPDATE muscle_group SET name = $1 WHERE name = $2 RETURNING id, name
`

type UpdateGroupParams struct {
	Name   string `json:"name"`
	Name_2 string `json:"name_2"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (MuscleGroup, error) {
	row := q.db.QueryRowContext(ctx, updateGroup, arg.Name, arg.Name_2)
	var i MuscleGroup
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
